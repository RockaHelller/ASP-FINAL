// <auto-generated />
using System;
using ASP_FINAL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ASP_FINAL.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230624163648_CreatedSeeding")]
    partial class CreatedSeeding
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ASP_FINAL.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ASP_FINAL.Models.Basket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("SoftDelete")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId")
                        .IsUnique();

                    b.ToTable("Baskets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppUserId = "b611a4ac-fc09-4fb7-ba23-d019c0299eaa",
                            CreateDate = new DateTime(2023, 6, 24, 20, 36, 47, 382, DateTimeKind.Local).AddTicks(7903),
                            SoftDelete = false
                        },
                        new
                        {
                            Id = 2,
                            AppUserId = "2e6fbfdc-37de-4b75-b88d-7b25cb4a5e27",
                            CreateDate = new DateTime(2023, 6, 24, 20, 36, 47, 382, DateTimeKind.Local).AddTicks(7915),
                            SoftDelete = false
                        });
                });

            modelBuilder.Entity("ASP_FINAL.Models.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SoftDelete")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDate = new DateTime(2023, 6, 24, 20, 36, 47, 382, DateTimeKind.Local).AddTicks(8082),
                            Image = "01.jpg",
                            Name = "Vegan Lover",
                            SoftDelete = false
                        },
                        new
                        {
                            Id = 2,
                            CreateDate = new DateTime(2023, 6, 24, 20, 36, 47, 382, DateTimeKind.Local).AddTicks(8084),
                            Image = "03.jpg",
                            Name = "Organic Foody",
                            SoftDelete = false
                        });
                });

            modelBuilder.Entity("ASP_FINAL.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SoftDelete")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDate = new DateTime(2023, 6, 24, 20, 36, 47, 382, DateTimeKind.Local).AddTicks(8102),
                            Image = "01.jpg",
                            Name = "Vegetables",
                            SoftDelete = false
                        },
                        new
                        {
                            Id = 2,
                            CreateDate = new DateTime(2023, 6, 24, 20, 36, 47, 382, DateTimeKind.Local).AddTicks(8105),
                            Image = "02.jpg",
                            Name = "Foods",
                            SoftDelete = false
                        });
                });

            modelBuilder.Entity("ASP_FINAL.Models.Discount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("Percent")
                        .HasColumnType("tinyint");

                    b.Property<bool>("SoftDelete")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Discounts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDate = new DateTime(2023, 6, 24, 20, 36, 47, 382, DateTimeKind.Local).AddTicks(8123),
                            Name = "Black Friday",
                            Percent = (byte)50,
                            SoftDelete = false
                        },
                        new
                        {
                            Id = 2,
                            CreateDate = new DateTime(2023, 6, 24, 20, 36, 47, 382, DateTimeKind.Local).AddTicks(8126),
                            Name = "No Discount",
                            Percent = (byte)0,
                            SoftDelete = false
                        });
                });

            modelBuilder.Entity("ASP_FINAL.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DiscountId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("RatingId")
                        .HasColumnType("int");

                    b.Property<int>("SKUCode")
                        .HasColumnType("int");

                    b.Property<int>("SalesCount")
                        .HasColumnType("int");

                    b.Property<bool>("SoftDelete")
                        .HasColumnType("bit");

                    b.Property<int>("StockCount")
                        .HasColumnType("int");

                    b.Property<int>("SubcategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DiscountId");

                    b.HasIndex("RatingId");

                    b.HasIndex("SubcategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BrandId = 1,
                            CategoryId = 1,
                            CreateDate = new DateTime(2023, 6, 24, 20, 36, 47, 382, DateTimeKind.Local).AddTicks(8143),
                            Description = "Cucumbers are commonly mistaken for vegetables. But in fact they are fruits, specifically berries. The long, green berries of the cucumber plant are what you usually find in your salads and sandwiches. They are made up of over 90% water, making them excellent for staying hydrated.",
                            DiscountId = 1,
                            Name = "Cucumber",
                            Price = 50m,
                            RatingId = 1,
                            SKUCode = 12345,
                            SalesCount = 80,
                            SoftDelete = false,
                            StockCount = 100,
                            SubcategoryId = 1
                        },
                        new
                        {
                            Id = 2,
                            BrandId = 2,
                            CategoryId = 2,
                            CreateDate = new DateTime(2023, 6, 24, 20, 36, 47, 382, DateTimeKind.Local).AddTicks(8152),
                            Description = "The standard eggplant is an oval or pear-shaped, glossy, purplish fruit 6 to 9 inches long. Japanese and oriental varieties tend to be elongated and slender with a thinner, more delicate skin. Ornamental varieties are edible and tend to produce small, white-skinned, oval-shaped fruit.",
                            DiscountId = 2,
                            Name = "Eggplant",
                            Price = 100m,
                            RatingId = 2,
                            SKUCode = 54321,
                            SalesCount = 180,
                            SoftDelete = false,
                            StockCount = 200,
                            SubcategoryId = 2
                        });
                });

            modelBuilder.Entity("ASP_FINAL.Models.ProductBasket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BasketId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BasketId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductBaskets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BasketId = 1,
                            ProductId = 1
                        },
                        new
                        {
                            Id = 2,
                            BasketId = 2,
                            ProductId = 2
                        });
                });

            modelBuilder.Entity("ASP_FINAL.Models.ProductImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsMain")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<bool>("SoftDelete")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDate = new DateTime(2023, 6, 24, 20, 36, 47, 382, DateTimeKind.Local).AddTicks(8192),
                            Image = "01.jpg",
                            IsMain = true,
                            ProductId = 1,
                            SoftDelete = false
                        },
                        new
                        {
                            Id = 2,
                            CreateDate = new DateTime(2023, 6, 24, 20, 36, 47, 382, DateTimeKind.Local).AddTicks(8194),
                            Image = "02.jpg",
                            IsMain = false,
                            ProductId = 1,
                            SoftDelete = false
                        },
                        new
                        {
                            Id = 3,
                            CreateDate = new DateTime(2023, 6, 24, 20, 36, 47, 382, DateTimeKind.Local).AddTicks(8196),
                            Image = "03.jpg",
                            IsMain = true,
                            ProductId = 2,
                            SoftDelete = false
                        },
                        new
                        {
                            Id = 4,
                            CreateDate = new DateTime(2023, 6, 24, 20, 36, 47, 382, DateTimeKind.Local).AddTicks(8197),
                            Image = "04.jpg",
                            IsMain = false,
                            ProductId = 2,
                            SoftDelete = false
                        });
                });

            modelBuilder.Entity("ASP_FINAL.Models.ProductTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("TagId");

                    b.ToTable("ProductTags");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ProductId = 1,
                            TagId = 1
                        },
                        new
                        {
                            Id = 2,
                            ProductId = 2,
                            TagId = 2
                        });
                });

            modelBuilder.Entity("ASP_FINAL.Models.ProductWishList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("WishListId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("WishListId");

                    b.ToTable("ProductWishlists");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ProductId = 1,
                            WishListId = 1
                        },
                        new
                        {
                            Id = 2,
                            ProductId = 2,
                            WishListId = 2
                        });
                });

            modelBuilder.Entity("ASP_FINAL.Models.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<byte>("RatingCount")
                        .HasColumnType("tinyint");

                    b.Property<bool>("SoftDelete")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Ratings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDate = new DateTime(2023, 6, 24, 20, 36, 47, 382, DateTimeKind.Local).AddTicks(8257),
                            RatingCount = (byte)1,
                            SoftDelete = false
                        },
                        new
                        {
                            Id = 2,
                            CreateDate = new DateTime(2023, 6, 24, 20, 36, 47, 382, DateTimeKind.Local).AddTicks(8258),
                            RatingCount = (byte)2,
                            SoftDelete = false
                        },
                        new
                        {
                            Id = 3,
                            CreateDate = new DateTime(2023, 6, 24, 20, 36, 47, 382, DateTimeKind.Local).AddTicks(8260),
                            RatingCount = (byte)3,
                            SoftDelete = false
                        },
                        new
                        {
                            Id = 4,
                            CreateDate = new DateTime(2023, 6, 24, 20, 36, 47, 382, DateTimeKind.Local).AddTicks(8261),
                            RatingCount = (byte)4,
                            SoftDelete = false
                        },
                        new
                        {
                            Id = 5,
                            CreateDate = new DateTime(2023, 6, 24, 20, 36, 47, 382, DateTimeKind.Local).AddTicks(8270),
                            RatingCount = (byte)5,
                            SoftDelete = false
                        });
                });

            modelBuilder.Entity("ASP_FINAL.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Describe")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("RatingId")
                        .HasColumnType("int");

                    b.Property<bool>("SoftDelete")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("ProductId");

                    b.HasIndex("RatingId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppUserId = "b611a4ac-fc09-4fb7-ba23-d019c0299eaa",
                            CreateDate = new DateTime(2023, 6, 24, 20, 36, 47, 382, DateTimeKind.Local).AddTicks(8290),
                            Describe = "Very tasty, it is the best cucumber i have ever eaten.",
                            ProductId = 1,
                            RatingId = 1,
                            SoftDelete = false
                        },
                        new
                        {
                            Id = 2,
                            AppUserId = "2e6fbfdc-37de-4b75-b88d-7b25cb4a5e27",
                            CreateDate = new DateTime(2023, 6, 24, 20, 36, 47, 382, DateTimeKind.Local).AddTicks(8294),
                            Describe = "It is a fresh vegetables. I liked it.",
                            ProductId = 2,
                            RatingId = 2,
                            SoftDelete = false
                        });
                });

            modelBuilder.Entity("ASP_FINAL.Models.Setting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("ASP_FINAL.Models.Slider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descriptiom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SoftDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Sliders");
                });

            modelBuilder.Entity("ASP_FINAL.Models.SliderInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SignImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SoftDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SliderInfos");
                });

            modelBuilder.Entity("ASP_FINAL.Models.Subcategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SoftDelete")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("SubCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            CreateDate = new DateTime(2023, 6, 24, 20, 36, 47, 382, DateTimeKind.Local).AddTicks(8312),
                            Name = "Cucumber",
                            SoftDelete = false
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            CreateDate = new DateTime(2023, 6, 24, 20, 36, 47, 382, DateTimeKind.Local).AddTicks(8314),
                            Name = "Eggplant",
                            SoftDelete = false
                        });
                });

            modelBuilder.Entity("ASP_FINAL.Models.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SoftDelete")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDate = new DateTime(2023, 6, 24, 20, 36, 47, 382, DateTimeKind.Local).AddTicks(8331),
                            Name = "Organic",
                            SoftDelete = false
                        },
                        new
                        {
                            Id = 2,
                            CreateDate = new DateTime(2023, 6, 24, 20, 36, 47, 382, DateTimeKind.Local).AddTicks(8333),
                            Name = "Fruits",
                            SoftDelete = false
                        },
                        new
                        {
                            Id = 3,
                            CreateDate = new DateTime(2023, 6, 24, 20, 36, 47, 382, DateTimeKind.Local).AddTicks(8334),
                            Name = "Vegan",
                            SoftDelete = false
                        },
                        new
                        {
                            Id = 4,
                            CreateDate = new DateTime(2023, 6, 24, 20, 36, 47, 382, DateTimeKind.Local).AddTicks(8336),
                            Name = "Healthy",
                            SoftDelete = false
                        },
                        new
                        {
                            Id = 5,
                            CreateDate = new DateTime(2023, 6, 24, 20, 36, 47, 382, DateTimeKind.Local).AddTicks(8337),
                            Name = "Seafood",
                            SoftDelete = false
                        },
                        new
                        {
                            Id = 6,
                            CreateDate = new DateTime(2023, 6, 24, 20, 36, 47, 382, DateTimeKind.Local).AddTicks(8338),
                            Name = "Crunchy",
                            SoftDelete = false
                        },
                        new
                        {
                            Id = 7,
                            CreateDate = new DateTime(2023, 6, 24, 20, 36, 47, 382, DateTimeKind.Local).AddTicks(8340),
                            Name = "Savory",
                            SoftDelete = false
                        },
                        new
                        {
                            Id = 8,
                            CreateDate = new DateTime(2023, 6, 24, 20, 36, 47, 382, DateTimeKind.Local).AddTicks(8341),
                            Name = "Gourmet",
                            SoftDelete = false
                        },
                        new
                        {
                            Id = 9,
                            CreateDate = new DateTime(2023, 6, 24, 20, 36, 47, 382, DateTimeKind.Local).AddTicks(8342),
                            Name = "Satisfying",
                            SoftDelete = false
                        },
                        new
                        {
                            Id = 10,
                            CreateDate = new DateTime(2023, 6, 24, 20, 36, 47, 382, DateTimeKind.Local).AddTicks(8344),
                            Name = "Delicious",
                            SoftDelete = false
                        },
                        new
                        {
                            Id = 11,
                            CreateDate = new DateTime(2023, 6, 24, 20, 36, 47, 382, DateTimeKind.Local).AddTicks(8345),
                            Name = "Fresh",
                            SoftDelete = false
                        },
                        new
                        {
                            Id = 12,
                            CreateDate = new DateTime(2023, 6, 24, 20, 36, 47, 382, DateTimeKind.Local).AddTicks(8346),
                            Name = "Juicy",
                            SoftDelete = false
                        },
                        new
                        {
                            Id = 13,
                            CreateDate = new DateTime(2023, 6, 24, 20, 36, 47, 382, DateTimeKind.Local).AddTicks(8347),
                            Name = "SpiceUp",
                            SoftDelete = false
                        },
                        new
                        {
                            Id = 14,
                            CreateDate = new DateTime(2023, 6, 24, 20, 36, 47, 382, DateTimeKind.Local).AddTicks(8349),
                            Name = "Tasty",
                            SoftDelete = false
                        },
                        new
                        {
                            Id = 15,
                            CreateDate = new DateTime(2023, 6, 24, 20, 36, 47, 382, DateTimeKind.Local).AddTicks(8350),
                            Name = "Zesty",
                            SoftDelete = false
                        });
                });

            modelBuilder.Entity("ASP_FINAL.Models.WishList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("SoftDelete")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId")
                        .IsUnique();

                    b.ToTable("Wishlists");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppUserId = "b611a4ac-fc09-4fb7-ba23-d019c0299eaa",
                            CreateDate = new DateTime(2023, 6, 24, 20, 36, 47, 382, DateTimeKind.Local).AddTicks(8374),
                            SoftDelete = false
                        },
                        new
                        {
                            Id = 2,
                            AppUserId = "2e6fbfdc-37de-4b75-b88d-7b25cb4a5e27",
                            CreateDate = new DateTime(2023, 6, 24, 20, 36, 47, 382, DateTimeKind.Local).AddTicks(8376),
                            SoftDelete = false
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ASP_FINAL.Models.Basket", b =>
                {
                    b.HasOne("ASP_FINAL.Models.AppUser", "AppUser")
                        .WithOne("Basket")
                        .HasForeignKey("ASP_FINAL.Models.Basket", "AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("ASP_FINAL.Models.Product", b =>
                {
                    b.HasOne("ASP_FINAL.Models.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASP_FINAL.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASP_FINAL.Models.Discount", "Discount")
                        .WithMany("Products")
                        .HasForeignKey("DiscountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASP_FINAL.Models.Rating", "Rating")
                        .WithMany("Products")
                        .HasForeignKey("RatingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASP_FINAL.Models.Subcategory", "SubCategory")
                        .WithMany("Products")
                        .HasForeignKey("SubcategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Category");

                    b.Navigation("Discount");

                    b.Navigation("Rating");

                    b.Navigation("SubCategory");
                });

            modelBuilder.Entity("ASP_FINAL.Models.ProductBasket", b =>
                {
                    b.HasOne("ASP_FINAL.Models.Basket", "Basket")
                        .WithMany("ProductBaskets")
                        .HasForeignKey("BasketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASP_FINAL.Models.Product", "Product")
                        .WithMany("ProductBaskets")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Basket");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ASP_FINAL.Models.ProductImage", b =>
                {
                    b.HasOne("ASP_FINAL.Models.Product", "Product")
                        .WithMany("Images")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ASP_FINAL.Models.ProductTag", b =>
                {
                    b.HasOne("ASP_FINAL.Models.Product", "Product")
                        .WithMany("ProductTags")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASP_FINAL.Models.Tag", "Tag")
                        .WithMany("ProductTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("ASP_FINAL.Models.ProductWishList", b =>
                {
                    b.HasOne("ASP_FINAL.Models.Product", "Product")
                        .WithMany("ProductWishLists")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASP_FINAL.Models.WishList", "WishList")
                        .WithMany("ProductWishLists")
                        .HasForeignKey("WishListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("WishList");
                });

            modelBuilder.Entity("ASP_FINAL.Models.Review", b =>
                {
                    b.HasOne("ASP_FINAL.Models.AppUser", "AppUser")
                        .WithMany("Reviews")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASP_FINAL.Models.Product", "Product")
                        .WithMany("Reviews")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASP_FINAL.Models.Rating", "Rating")
                        .WithMany("Reviews")
                        .HasForeignKey("RatingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Product");

                    b.Navigation("Rating");
                });

            modelBuilder.Entity("ASP_FINAL.Models.Subcategory", b =>
                {
                    b.HasOne("ASP_FINAL.Models.Category", "Category")
                        .WithMany("Subcategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ASP_FINAL.Models.WishList", b =>
                {
                    b.HasOne("ASP_FINAL.Models.AppUser", "AppUser")
                        .WithOne("WishList")
                        .HasForeignKey("ASP_FINAL.Models.WishList", "AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ASP_FINAL.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ASP_FINAL.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASP_FINAL.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ASP_FINAL.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ASP_FINAL.Models.AppUser", b =>
                {
                    b.Navigation("Basket")
                        .IsRequired();

                    b.Navigation("Reviews");

                    b.Navigation("WishList")
                        .IsRequired();
                });

            modelBuilder.Entity("ASP_FINAL.Models.Basket", b =>
                {
                    b.Navigation("ProductBaskets");
                });

            modelBuilder.Entity("ASP_FINAL.Models.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ASP_FINAL.Models.Category", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("Subcategories");
                });

            modelBuilder.Entity("ASP_FINAL.Models.Discount", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ASP_FINAL.Models.Product", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("ProductBaskets");

                    b.Navigation("ProductTags");

                    b.Navigation("ProductWishLists");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("ASP_FINAL.Models.Rating", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("ASP_FINAL.Models.Subcategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ASP_FINAL.Models.Tag", b =>
                {
                    b.Navigation("ProductTags");
                });

            modelBuilder.Entity("ASP_FINAL.Models.WishList", b =>
                {
                    b.Navigation("ProductWishLists");
                });
#pragma warning restore 612, 618
        }
    }
}
